Lendo arquivo: teste_declaracao_funcao.ml
=== LLVM IR Gerado ===
; ModuleID = "minilang_module"
target triple = "x86_64-pc-windows-msvc"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

declare external ccc i32 @"printf"(i8* %".1", ...)

declare external ccc i32 @"wprintf"(i16* %".1", ...)

declare external ccc i32 @"_setmode"(i32 %".1", i32 %".2")

declare external ccc i32 @"SetConsoleOutputCP"(i32 %".1")

declare external ccc i8* @"malloc"(i64 %".1")

declare external ccc void @"free"(i8* %".1")

declare external ccc i64 @"strlen"(i8* %".1")

declare external ccc i8* @"strcpy"(i8* %".1", i8* %".2")

declare external ccc i8* @"strcat"(i8* %".1", i8* %".2")

declare external ccc i32 @"sprintf"(i8* %".1", i8* %".2", ...)

declare external ccc i8* @"to_str_int"(i64 %".1")

declare external ccc i8* @"to_str_float"(double %".1")

declare external ccc i64 @"to_int"(double %".1")

declare external ccc double @"to_float"(i64 %".1")

declare double @"fmod"(double %".1", double %".2")

@"tamanho" = internal global i64 0
define i64 @"soma"(i64 %"a", i64 %"b")
{
entry:
  %"a.1" = alloca i64
  store i64 %"a", i64* %"a.1"
  %"b.1" = alloca i64
  store i64 %"b", i64* %"b.1"
  %"a.2" = load i64, i64* %"a.1"
  %"b.2" = load i64, i64* %"b.1"
  %"add" = add i64 %"a.2", %"b.2"
  ret i64 %"add"
}

define double @"media"(double %"a", double %"b")
{
entry:
  %"a.1" = alloca double
  store double %"a", double* %"a.1"
  %"b.1" = alloca double
  store double %"b", double* %"b.1"
  %"a.2" = load double, double* %"a.1"
  %"b.2" = load double, double* %"b.1"
  %"fadd" = fadd double %"a.2", %"b.2"
  %"fdiv" = fdiv double %"fadd", 0x4000000000000000
  ret double %"fdiv"
}

define i32 @"main"()
{
entry:
  %".2" = call ccc i32 @"SetConsoleOutputCP"(i32 65001)
  %".3" = call ccc i8* @"malloc"(i64 40)
  %".4" = bitcast i8* %".3" to i64*
  %".5" = getelementptr inbounds i64, i64* %".4", i64 0
  store i64 10, i64* %".5"
  %".7" = getelementptr inbounds i64, i64* %".4", i64 1
  store i64 8, i64* %".7"
  %".9" = getelementptr inbounds i64, i64* %".4", i64 2
  store i64 9, i64* %".9"
  %".11" = getelementptr inbounds i64, i64* %".4", i64 3
  store i64 7, i64* %".11"
  %".13" = getelementptr inbounds i64, i64* %".4", i64 4
  store i64 6, i64* %".13"
  %"notas" = alloca [5 x i64]
  %".15" = getelementptr inbounds [5 x i64], [5 x i64]* %"notas", i32 0, i32 0
  %".16" = getelementptr inbounds i64, i64* %".15", i64 0
  store i64 10, i64* %".16"
  %".18" = getelementptr inbounds i64, i64* %".15", i64 1
  store i64 8, i64* %".18"
  %".20" = getelementptr inbounds i64, i64* %".15", i64 2
  store i64 9, i64* %".20"
  %".22" = getelementptr inbounds i64, i64* %".15", i64 3
  store i64 7, i64* %".22"
  %".24" = getelementptr inbounds i64, i64* %".15", i64 4
  store i64 6, i64* %".24"
  %"len" = alloca i64
  store i64 5, i64* %"len"
  %".27" = getelementptr inbounds [19 x i8], [19 x i8]* @"str_19", i32 0, i32 0
  %".28" = getelementptr inbounds [4 x i8], [4 x i8]* @"fmt_str_20", i32 0, i32 0
  %".29" = call ccc i32 (i8*, ...) @"printf"(i8* %".28", i8* %".27")
  %"len.1" = load i64, i64* %"len"
  %".30" = getelementptr inbounds [6 x i8], [6 x i8]* @"fmt_str_21", i32 0, i32 0
  %".31" = call ccc i32 (i8*, ...) @"printf"(i8* %".30", i64 %"len.1")
  %".32" = getelementptr inbounds [17 x i8], [17 x i8]* @"str_22", i32 0, i32 0
  %".33" = getelementptr inbounds [4 x i8], [4 x i8]* @"fmt_str_23", i32 0, i32 0
  %".34" = call ccc i32 (i8*, ...) @"printf"(i8* %".33", i8* %".32")
  %"tamanho" = load i64, i64* @"tamanho"
  %".35" = getelementptr inbounds [6 x i8], [6 x i8]* @"fmt_str_24", i32 0, i32 0
  %".36" = call ccc i32 (i8*, ...) @"printf"(i8* %".35", i64 %"tamanho")
  %".37" = call i64 @"soma"(i64 5, i64 3)
  %"resultado" = alloca i64
  store i64 %".37", i64* %"resultado"
  %".39" = getelementptr inbounds [20 x i8], [20 x i8]* @"str_25", i32 0, i32 0
  %".40" = getelementptr inbounds [4 x i8], [4 x i8]* @"fmt_str_26", i32 0, i32 0
  %".41" = call ccc i32 (i8*, ...) @"printf"(i8* %".40", i8* %".39")
  %"resultado.1" = load i64, i64* %"resultado"
  %".42" = getelementptr inbounds [6 x i8], [6 x i8]* @"fmt_str_27", i32 0, i32 0
  %".43" = call ccc i32 (i8*, ...) @"printf"(i8* %".42", i64 %"resultado.1")
  %".44" = call double @"media"(double 0x4025000000000000, double 0x4021000000000000)
  %"media_valor" = alloca double
  store double %".44", double* %"media_valor"
  %".46" = getelementptr inbounds [9 x i8], [9 x i8]* @"str_28", i32 0, i32 0
  %".47" = getelementptr inbounds [4 x i8], [4 x i8]* @"fmt_str_29", i32 0, i32 0
  %".48" = call ccc i32 (i8*, ...) @"printf"(i8* %".47", i8* %".46")
  %"media_valor.1" = load double, double* %"media_valor"
  %".49" = getelementptr inbounds [4 x i8], [4 x i8]* @"fmt_str_30", i32 0, i32 0
  %".50" = call ccc i32 (i8*, ...) @"printf"(i8* %".49", double %"media_valor.1")
  %".51" = getelementptr inbounds [55 x i8], [55 x i8]* @"str_31", i32 0, i32 0
  %".52" = getelementptr inbounds [4 x i8], [4 x i8]* @"fmt_str_32", i32 0, i32 0
  %".53" = call ccc i32 (i8*, ...) @"printf"(i8* %".52", i8* %".51")
  store i64 5, i64* @"tamanho"
  call ccc void @"free"(i8* %".3")
  ret i32 0
}

@"str_19" = internal constant [19 x i8] c"Tamanho do array: \00"
@"fmt_str_20" = internal constant [4 x i8] c"%s\0a\00"
@"fmt_str_21" = internal constant [6 x i8] c"%lld\0a\00"
@"str_22" = internal constant [17 x i8] c"Tamanho global: \00"
@"fmt_str_23" = internal constant [4 x i8] c"%s\0a\00"
@"fmt_str_24" = internal constant [6 x i8] c"%lld\0a\00"
@"str_25" = internal constant [20 x i8] c"Resultado da soma: \00"
@"fmt_str_26" = internal constant [4 x i8] c"%s\0a\00"
@"fmt_str_27" = internal constant [6 x i8] c"%lld\0a\00"
@"str_28" = internal constant [9 x i8] c"M\c3\a9dia: \00"
@"fmt_str_29" = internal constant [4 x i8] c"%s\0a\00"
@"fmt_str_30" = internal constant [4 x i8] c"%f\0a\00"
@"str_31" = internal constant [55 x i8] c"Todos os testes de declara\c3\a7\c3\a3o por fun\c3\a7\c3\a3o passaram!\00"
@"fmt_str_32" = internal constant [4 x i8] c"%s\0a\00"
Gerando IR LLVM...
Configurando target...
Triple: x86_64-pc-windows-msvc
Target criado: <Target x86-64 (64-bit X86: EM64T and AMD64)>
Configurando target machine para Windows...
Target machine criada: <llvmlite.binding.targets.TargetMachine object at 0x0000024CE68B3610>
Parseando assembly...
Verificando módulo...
Otimizando...
Gerando código objeto em 'output.obj'...
Tamanho do objeto gerado: 2022 bytes
Arquivo objeto criado com sucesso: output.obj

Código objeto gerado em 'output.obj'

Para criar executável no Windows:
1. Com MinGW: gcc -mcmodel=large output.obj -o programa.exe
2. Com Clang: clang output.obj -o programa.exe
3. Com MSVC: cl output.obj /Fe:programa.exe
