struct Node
    key: string,
    value: string,
    next: ref Node
end

func append(node: ref Node,  key: string, value: string)
    if node.next == null then
        node.next = ref Node(key, value, null)
    else
        append(node.next, key, value)
    end
end

func is_key_in_node(node: ref Node, key: string) -> bool
    while node != null do
        if (node.key == key) then
            return true
        end
        node = node.next
    end
    return false
end


func update_key(node: ref Node, key: string, value: string)
    while node != null do
        if (node.key == key) then
            node.value = value
            return
        end
        node = node.next
    end
end


func get_key_in_node(node: ref Node, key: string) -> string
    while node != null do
        if (node.key == key) then
            return node.value
        end
        node = node.next
    end
    return ""
end

let capacity: int = 16

let buckets: Node[16] = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]

// Função hash polonomial
func hash(chave: string, tamanho_da_tabela: int) -> int
    //Função hash para uso em tabelas hash.
    //Retorna um índice entre 0 e tamanho_tabela-1.
    let hash_value: int = 0
    let string_size: int = strlen(chave)
    let i: int = 0
    while string_size - i > 0 do
        hash_value = (hash_value * 31 + ord(chave[i])) % tamanho_da_tabela
        i = i + 1
    end
    return hash_value
end

func push(key: string, value: string) -> void
    let local_hash: int = hash(key, capacity)
    print("Imprimindo a hash local")
    print("hash:"+ to_str(local_hash))
    if buckets[local_hash] == null then
        print("Adicionando registro pela primeira vez nesta hash")
        buckets[local_hash] = Node(key, value, null)
        return
    end
    let node: Node = buckets[local_hash]
    let key_present: bool = is_key_in_node(buckets[local_hash], key)
    if key_present then
        print("Registro já encontrado atualizando valor")
        update_key(node, key, value)
        return
    end
    print("Novo registro para essa hash")
    append(node, key, value)
end

func get(key: string) -> string
    let local_hash: int = hash(key, capacity)
    if buckets[local_hash] != null then
        let node: Node = buckets[local_hash]
        let key_present: bool = is_key_in_node(buckets[local_hash], key)
        if key_present then
            return get_key_in_node(node, key)
        end
    end
    return ""
end

push("celular", "android")
push("linguagem", "rust")
let resultado: string = get("celular")
print("get(celular): " +resultado)
let resultado: string = get("linguagem")
print("get(linguagem): " +resultado)
print("Atualizando valor da linguagem")
push("linguagem", "python")
let resultado: string = get("linguagem")
print("get(linguagem): " +resultado)
