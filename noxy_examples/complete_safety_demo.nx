// ============================================
// DEMONSTRA√á√ÉO COMPLETA: NOXY COM SUPERPODERES RUST
// ============================================
// Este exemplo mostra como transformamos uma linguagem simples
// em uma linguagem com seguran√ßa de n√≠vel industrial

print("ü¶Ä NOXY COM SUPERPODERES DO RUST")
print("=====================================")
print("")

// ============================================
// DEFINI√á√ïES DOS PADR√ïES DE SEGURAN√áA
// ============================================

// Padr√£o Optional (inspirado em Option<T>)
struct Optional
    has_value: bool,
    value: int
end

func Some(value: int) -> Optional
    return Optional(true, value)
end

func None() -> Optional
    return Optional(false, 0)
end

func is_some(opt: Optional) -> bool
    return opt.has_value
end

// Padr√£o Result (inspirado em Result<T, E>)
// No Rust: enum Result<T, E> { Ok(T), Err(E) }
// Aqui simulamos com struct + flag booleano
struct Result
    is_ok: bool,      // true = Ok(value), false = Err(error)
    data: int         // value quando Ok, error_code quando Err
end

let ERROR_DIVISION_BY_ZERO: int = 1
let ERROR_ARRAY_OUT_OF_BOUNDS: int = 2
let ERROR_NULL_DEREFERENCE: int = 3
let ERROR_INVALID_USER_ID: int = 4

func Ok(value: int) -> Result
    return Result(true, value)  // is_ok=true, data=value
end

func Err(error_code: int) -> Result
    return Result(false, error_code)  // is_ok=false, data=error_code
end

func is_ok(result: Result) -> bool
    return result.is_ok
end

func unwrap_or(result: Result, default_value: int) -> int
    if is_ok(result) then
        return result.data  // data cont√©m o value quando is_ok=true
    else
        return default_value
    end
end

// ============================================
// OPERA√á√ïES SEGURAS FUNDAMENTAIS
// ============================================

func safe_divide(a: int, b: int) -> Result
    if b == 0 then
        return Err(ERROR_DIVISION_BY_ZERO)
    end
    return Ok(a / b)
end

func safe_array_get(array: int[], size: int, index: int) -> Result
    if index < 0 | index >= size then
        return Err(ERROR_ARRAY_OUT_OF_BOUNDS)
    end
    return Ok(array[index])
end

func safe_dereference(opt: Optional) -> Result
    if !opt.has_value then
        return Err(ERROR_NULL_DEREFERENCE)
    end
    return Ok(opt.value)
end

func validate_user_id(id: int) -> Result
    if id <= 0 | id > 9999 then
        return Err(ERROR_INVALID_USER_ID)
    end
    return Ok(id)
end

// ============================================
// SISTEMA DE USU√ÅRIOS COM SEGURAN√áA TOTAL
// ============================================

struct User
    id: int,
    score: int
end

func create_user(user_id: int, initial_score: int) -> Result
    // Valida√ß√£o de entrada
    let validation: Result = validate_user_id(user_id)
    if !is_ok(validation) then
        return validation  // Propaga erro de valida√ß√£o
    end
    
    // Valida√ß√£o de score
    if initial_score < 0 then
        return Err(ERROR_INVALID_USER_ID)
    end
    
    return Ok(user_id)  // Retorna ID v√°lido
end

func calculate_user_bonus(user: User, divisor: int) -> Result
    // Opera√ß√£o composta: divis√£o segura + valida√ß√£o
    let division_result: Result = safe_divide(user.score, divisor)
    if !is_ok(division_result) then
        return division_result  // Propaga erro de divis√£o
    end
    
    return Ok(division_result.value + 100)  // Bonus = score/divisor + 100
end

// ============================================
// DEMONSTRA√á√ÉO PR√ÅTICA: PROCESSAMENTO DE USU√ÅRIOS
// ============================================

print("üìä SISTEMA DE USU√ÅRIOS COM SEGURAN√áA TOTAL")
print("==========================================")
print("")

// Dados de teste (alguns v√°lidos, alguns inv√°lidos)
let user_data: User[5] = [
    User(1001, 500),   // Usu√°rio v√°lido
    User(-1, 100),     // ID inv√°lido
    User(1002, 0),     // Score zero (divis√£o por zero)
    User(1003, 300),   // Usu√°rio v√°lido  
    User(15000, 200)   // ID fora do limite
]

print("Processando 5 usu√°rios:")
print("")

let successful_operations: int = 0
let failed_operations: int = 0

// Processamento do Usu√°rio 1
print("üë§ Usu√°rio 1 (ID: 1001, Score: 500)")
let user1_validation: Result = create_user(1001, 500)
if is_ok(user1_validation) then
    let bonus1: Result = calculate_user_bonus(user_data[0], 5)
    if is_ok(bonus1) then
        print("‚úÖ B√¥nus calculado: " + to_str(bonus1.value))
        successful_operations = successful_operations + 1
    else
        print("‚ùå Falha no c√°lculo do b√¥nus")
        failed_operations = failed_operations + 1
    end
else
    print("‚ùå Usu√°rio inv√°lido")
    failed_operations = failed_operations + 1
end
print("")

// Processamento do Usu√°rio 2 (ID inv√°lido)
print("üë§ Usu√°rio 2 (ID: -1, Score: 100)")
let user2_validation: Result = create_user(-1, 100)
if is_ok(user2_validation) then
    print("‚úÖ Usu√°rio v√°lido")
    successful_operations = successful_operations + 1
else
    print("‚ùå ID inv√°lido detectado e rejeitado")
    failed_operations = failed_operations + 1
end
print("")

// Processamento do Usu√°rio 3 (Divis√£o por zero)
print("üë§ Usu√°rio 3 (ID: 1002, Score: 0)")
let user3_validation: Result = create_user(1002, 0)
if is_ok(user3_validation) then
    let bonus3: Result = calculate_user_bonus(user_data[2], 0)  // Divis√£o por zero!
    if is_ok(bonus3) then
        print("‚úÖ B√¥nus calculado: " + to_str(bonus3.value))
        successful_operations = successful_operations + 1
    else
        print("‚ùå Divis√£o por zero detectada e evitada")
        failed_operations = failed_operations + 1
    end
else
    print("‚ùå Usu√°rio inv√°lido")
    failed_operations = failed_operations + 1
end
print("")

// Processamento do Usu√°rio 4 (Sucesso)
print("üë§ Usu√°rio 4 (ID: 1003, Score: 300)")
let user4_validation: Result = create_user(1003, 300)
if is_ok(user4_validation) then
    let bonus4: Result = calculate_user_bonus(user_data[3], 3)
    if is_ok(bonus4) then
        print("‚úÖ B√¥nus calculado: " + to_str(bonus4.value))
        successful_operations = successful_operations + 1
    else
        print("‚ùå Falha no c√°lculo do b√¥nus")
        failed_operations = failed_operations + 1
    end
else
    print("‚ùå Usu√°rio inv√°lido")
    failed_operations = failed_operations + 1
end
print("")

// Processamento do Usu√°rio 5 (ID fora do limite)
print("üë§ Usu√°rio 5 (ID: 15000, Score: 200)")
let user5_validation: Result = create_user(15000, 200)
if is_ok(user5_validation) then
    print("‚úÖ Usu√°rio v√°lido")
    successful_operations = successful_operations + 1
else
    print("‚ùå ID fora do limite permitido")
    failed_operations = failed_operations + 1
end
print("")

// ============================================
// DEMONSTRA√á√ÉO DE ACESSO SEGURO A ARRAYS
// ============================================

print("üîç DEMONSTRA√á√ÉO: ACESSO SEGURO A ARRAYS")
print("======================================")

let scores: int[3] = [85, 92, 78]

print("Tentando acessar √≠ndices v√°lidos e inv√°lidos:")

let access1: Result = safe_array_get(scores, 3, 1)
if is_ok(access1) then
    print("‚úÖ scores[1] = " + to_str(access1.value))
else
    print("‚ùå Acesso inv√°lido ao √≠ndice 1")
end

let access2: Result = safe_array_get(scores, 3, 5)
if is_ok(access2) then
    print("‚úÖ scores[5] = " + to_str(access2.value))
else
    print("‚ùå √çndice 5 fora dos limites (prevenido)")
end

let access3: Result = safe_array_get(scores, 3, -1)
if is_ok(access3) then
    print("‚úÖ scores[-1] = " + to_str(access3.value))
else
    print("‚ùå √çndice negativo detectado (prevenido)")
end

print("")

// ============================================
// DEMONSTRA√á√ÉO DE VALORES OPCIONAIS
// ============================================

print("üéØ DEMONSTRA√á√ÉO: VALORES OPCIONAIS")
print("=================================")

func find_user_score(user_id: int) -> Optional
    if user_id == 1001 then
        return Some(500)
    end
    if user_id == 1003 then
        return Some(300)
    end
    return None()  // Usu√°rio n√£o encontrado
end

print("Buscando scores de usu√°rios:")

let score1: Optional = find_user_score(1001)
if is_some(score1) then
    print("‚úÖ Score do usu√°rio 1001: " + to_str(score1.value))
else
    print("‚ùå Usu√°rio 1001 n√£o encontrado")
end

let score2: Optional = find_user_score(9999)
if is_some(score2) then
    print("‚úÖ Score do usu√°rio 9999: " + to_str(score2.value))
else
    print("‚ùå Usu√°rio 9999 n√£o encontrado (null safety)")
end

print("")

// ============================================
// RELAT√ìRIO FINAL
// ============================================

print("üìà RELAT√ìRIO FINAL")
print("=================")
print("Opera√ß√µes bem-sucedidas: " + to_str(successful_operations))
print("Opera√ß√µes com falha: " + to_str(failed_operations))
print("Total processado: " + to_str(successful_operations + failed_operations))
print("")

let success_rate: Result = safe_divide(successful_operations * 100, successful_operations + failed_operations)
if is_ok(success_rate) then
    print("Taxa de sucesso: " + to_str(success_rate.value) + "%")
else
    print("N√£o foi poss√≠vel calcular taxa de sucesso")
end

print("")
print("üèÜ RESULTADO: ZERO CRASHES, 100% CONFI√ÅVEL!")
print("üí° Todos os erros foram detectados e tratados graciosamente")
print("ü¶Ä Rust patterns funcionando perfeitamente em Noxy!")
