// ============================================
// MiniLang - Percurso de √Årvore Bin√°ria
// Demonstra√ß√£o das Atribui√ß√µes de Structs
// ============================================

print("=== PERCURSO DE √ÅRVORE BIN√ÅRIA ===")
print("Demonstra√ß√£o das Atribui√ß√µes de Structs")
print("")

// ============================================
// DEFINI√á√ÉO DA ESTRUTURA
// ============================================
print("--- DEFINI√á√ÉO DA ESTRUTURA ---")

// Definir n√≥ da √°rvore bin√°ria
struct TreeNode
    valor: int,
    esquerda: ref TreeNode,
    direita: ref TreeNode
end

print("‚úì Struct TreeNode definido com auto-refer√™ncia")
print("")

// ============================================
// FUN√á√ïES DE PERCURSO
// ============================================
print("--- FUN√á√ïES DE PERCURSO ---")

// Fun√ß√£o para percurso in-order (esquerda, raiz, direita)
func percurso_in_order(node: ref TreeNode)
    if node != null then
        percurso_in_order(node.esquerda)
        print("Valor: " + to_str(node.valor))
        percurso_in_order(node.direita)
    end
end

// Fun√ß√£o para percurso pre-order (raiz, esquerda, direita)
func percurso_pre_order(node: ref TreeNode)
    if node != null then
        print("Valor: " + to_str(node.valor))
        percurso_pre_order(node.esquerda)
        percurso_pre_order(node.direita)
    end
end

// Fun√ß√£o para percurso post-order (esquerda, direita, raiz)
func percurso_post_order(node: ref TreeNode)
    if node != null then
        percurso_post_order(node.esquerda)
        percurso_post_order(node.direita)
        print("Valor: " + to_str(node.valor))
    end
end

// Fun√ß√£o para inserir novo n√≥ na √°rvore
func inserir_no(raiz: ref TreeNode, novo_valor: int): ref TreeNode
    if raiz == null then
        // Criar novo n√≥
        let novo_no: TreeNode = TreeNode(novo_valor, null, null)
        return ref novo_no
    end
    
    if novo_valor < raiz.valor then
        // Inserir na sub√°rvore esquerda
        raiz.esquerda = inserir_no(raiz.esquerda, novo_valor)
    else
        // Inserir na sub√°rvore direita
        raiz.direita = inserir_no(raiz.direita, novo_valor)
    end
    
    return raiz
end

// Fun√ß√£o para contar n√≥s na √°rvore
func contar_nos(node: ref TreeNode): int
    if node == null then
        return 0
    end
    
    return 1 + contar_nos(node.esquerda) + contar_nos(node.direita)
end

// Fun√ß√£o para encontrar altura da √°rvore
func altura_arvore(node: ref TreeNode): int
    if node == null then
        return 0
    end
    
    let altura_esq: int = altura_arvore(node.esquerda)
    let altura_dir: int = altura_arvore(node.direita)
    
    if altura_esq > altura_dir then
        return altura_esq + 1
    else
        return altura_dir + 1
    end
end

print("‚úì Fun√ß√µes de percurso implementadas")
print("‚úì Fun√ß√£o de inser√ß√£o implementada")
print("‚úì Fun√ß√µes auxiliares implementadas")
print("")

// ============================================
// CONSTRU√á√ÉO DA √ÅRVORE
// ============================================
print("--- CONSTRU√á√ÉO DA √ÅRVORE ---")

// Criar √°rvore inicial
let raiz: TreeNode = TreeNode(50, null, null)
print("‚úì Raiz criada com valor 50")

// Inserir n√≥s usando atribui√ß√µes din√¢micas
raiz = inserir_no(ref raiz, 30)
raiz = inserir_no(ref raiz, 70)
raiz = inserir_no(ref raiz, 20)
raiz = inserir_no(ref raiz, 40)
raiz = inserir_no(ref raiz, 60)
raiz = inserir_no(ref raiz, 80)
raiz = inserir_no(ref raiz, 10)
raiz = inserir_no(ref raiz, 25)
raiz = inserir_no(ref raiz, 35)
raiz = inserir_no(ref raiz, 45)

print("‚úì √Årvore constru√≠da com 11 n√≥s")
print("")

// ============================================
// INFORMA√á√ïES DA √ÅRVORE
// ============================================
print("--- INFORMA√á√ïES DA √ÅRVORE ---")

let total_nos: int = contar_nos(ref raiz)
let altura: int = altura_arvore(ref raiz)

print("Total de n√≥s na √°rvore: " + to_str(total_nos))
print("Altura da √°rvore: " + to_str(altura))
print("")

// ============================================
// PERCURSOS DA √ÅRVORE
// ============================================
print("--- PERCURSOS DA √ÅRVORE ---")

print("1. PERCURSO IN-ORDER (esquerda, raiz, direita):")
print("   Resultado esperado: 10, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80")
print("   Resultado obtido:")
percurso_in_order(ref raiz)
print("")

print("2. PERCURSO PRE-ORDER (raiz, esquerda, direita):")
print("   Resultado esperado: 50, 30, 20, 10, 25, 40, 35, 45, 70, 60, 80")
print("   Resultado obtido:")
percurso_pre_order(ref raiz)
print("")

print("3. PERCURSO POST-ORDER (esquerda, direita, raiz):")
print("   Resultado esperado: 10, 25, 20, 35, 45, 40, 30, 60, 80, 70, 50")
print("   Resultado obtido:")
percurso_post_order(ref raiz)
print("")

// ============================================
// MODIFICA√á√ÉO DIN√ÇMICA DA √ÅRVORE
// ============================================
print("--- MODIFICA√á√ÉO DIN√ÇMICA DA √ÅRVORE ---")

print("Inserindo novos valores dinamicamente...")

// Inserir mais n√≥s
raiz = inserir_no(ref raiz, 15)
raiz = inserir_no(ref raiz, 55)
raiz = inserir_no(ref raiz, 75)
raiz = inserir_no(ref raiz, 90)

print("‚úì Novos n√≥s inseridos")
print("")

// Mostrar nova contagem
let novo_total: int = contar_nos(ref raiz)
let nova_altura: int = altura_arvore(ref raiz)

print("Nova contagem de n√≥s: " + to_str(novo_total))
print("Nova altura da √°rvore: " + to_str(nova_altura))
print("")

// Mostrar novo percurso in-order
print("Novo percurso IN-ORDER ap√≥s inser√ß√µes:")
percurso_in_order(ref raiz)
print("")

// ============================================
// DEMONSTRA√á√ÉO DE ATRIBUI√á√ïES DIRETAS
// ============================================
print("--- DEMONSTRA√á√ÉO DE ATRIBUI√á√ïES DIRETAS ---")

print("Modificando valores diretamente...")

// Modificar valores de alguns n√≥s diretamente
// (Note: isso quebra a propriedade de √°rvore bin√°ria de busca)
raiz.valor = 100
print("‚úì Valor da raiz alterado para 100")

// Acessar e modificar um filho
if raiz.esquerda != null then
    raiz.esquerda.valor = 200
    print("‚úì Valor do filho esquerdo alterado para 200")
end

if raiz.direita != null then
    raiz.direita.valor = 300
    print("‚úì Valor do filho direito alterado para 300")
end

print("")

// Mostrar percurso ap√≥s modifica√ß√µes
print("Percurso IN-ORDER ap√≥s modifica√ß√µes diretas:")
percurso_in_order(ref raiz)
print("")

// ============================================
// RECONSTRU√á√ÉO DA √ÅRVORE
// ============================================
print("--- RECONSTRU√á√ÉO DA √ÅRVORE ---")

print("Reconstruindo √°rvore bin√°ria de busca v√°lida...")

// Criar nova √°rvore v√°lida
let nova_raiz: TreeNode = TreeNode(50, null, null)

// Inserir valores em ordem
nova_raiz = inserir_no(ref nova_raiz, 25)
nova_raiz = inserir_no(ref nova_raiz, 75)
nova_raiz = inserir_no(ref nova_raiz, 12)
nova_raiz = inserir_no(ref nova_raiz, 37)
nova_raiz = inserir_no(ref nova_raiz, 62)
nova_raiz = inserir_no(ref nova_raiz, 87)

print("‚úì Nova √°rvore reconstru√≠da")
print("")

// Mostrar percurso da nova √°rvore
print("Percurso IN-ORDER da nova √°rvore:")
percurso_in_order(ref nova_raiz)
print("")

// ============================================
// RESUMO DA IMPLEMENTA√á√ÉO
// ============================================
print("=== RESUMO DA IMPLEMENTA√á√ÉO ===")
print("‚úì Estrutura TreeNode com auto-refer√™ncia funcionando")
print("‚úì Atribui√ß√µes din√¢micas de campos implementadas")
print("‚úì Fun√ß√µes de percurso (in-order, pre-order, post-order) funcionando")
print("‚úì Inser√ß√£o din√¢mica de n√≥s implementada")
print("‚úì Modifica√ß√£o direta de valores funcionando")
print("‚úì C√°lculo de altura e contagem de n√≥s implementado")
print("‚úì Reconstru√ß√£o de √°rvore funcionando")

print("")
print("üéâ Algoritmo de percurso de √°rvore bin√°ria implementado com sucesso!")
print("üí° Demonstra√ß√£o completa das atribui√ß√µes de structs")
print("üí° Auto-refer√™ncia funcionando perfeitamente")
print("üí° Estruturas de dados din√¢micas suportadas")

print("")
print("=== IMPLEMENTA√á√ÉO CONCLU√çDA COM SUCESSO ===") 