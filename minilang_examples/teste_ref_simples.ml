// ============================================
// MiniLang - Teste Simples de Refer√™ncias
// Verifica√ß√£o b√°sica de ref em fun√ß√µes
// ============================================

print("=== TESTE SIMPLES DE REFER√äNCIAS ===")
print("Verifica√ß√£o b√°sica de ref em fun√ß√µes")
print("")

// ============================================
// DEFINI√á√ÉO DA ESTRUTURA
// ============================================
print("--- DEFINI√á√ÉO DA ESTRUTURA ---")

// Definir n√≥ da √°rvore bin√°ria
struct TreeNode
    valor: int,
    esquerda: ref TreeNode,
    direita: ref TreeNode
end

print("‚úì Struct TreeNode definido com auto-refer√™ncia")
print("")

// ============================================
// TESTE 1: FUN√á√ÉO COM PAR√ÇMETRO REF
// ============================================
print("--- TESTE 1: FUN√á√ÉO COM PAR√ÇMETRO REF ---")

// Fun√ß√£o que recebe uma refer√™ncia como par√¢metro
func modificar_no(node: ref TreeNode)
    if node != null then
        node.valor = node.valor * 2
        print("Valor modificado para: " + to_str(node.valor))
    end
end

print("‚úì Fun√ß√£o com par√¢metro ref definida")

// ============================================
// TESTE 2: FUN√á√ÉO QUE RETORNA REF
// ============================================
print("--- TESTE 2: FUN√á√ÉO QUE RETORNA REF ---")

// Fun√ß√£o que retorna uma refer√™ncia
func obter_filho_esquerdo(node: ref TreeNode): ref TreeNode
    if node != null then
        return node.esquerda
    else
        return null
    end
end

print("‚úì Fun√ß√£o que retorna ref definida")

// ============================================
// EXECU√á√ÉO DOS TESTES
// ============================================
print("--- EXECU√á√ÉO DOS TESTES ---")

// Criar √°rvore de teste
let raiz: TreeNode = TreeNode(10, null, null)
let filho_esq: TreeNode = TreeNode(5, null, null)

print("‚úì √Årvore de teste criada")

// Conectar filho
raiz.esquerda = ref filho_esq

// Teste 1: Modificar n√≥ usando fun√ß√£o com par√¢metro ref
print("")
print("Teste 1: Modificando n√≥...")
modificar_no(ref raiz)

// Teste 2: Obter filho usando fun√ß√£o que retorna ref
print("")
print("Teste 2: Obtendo filho esquerdo...")
let filho_obtido: ref TreeNode = obter_filho_esquerdo(ref raiz)
if filho_obtido != null then
    print("Filho esquerdo encontrado com valor: " + to_str(filho_obtido.valor))
else
    print("Filho esquerdo √© null")
end

// ============================================
// RESUMO DOS TESTES
// ============================================
print("")
print("=== RESUMO DOS TESTES ===")
print("‚úì Par√¢metros ref em fun√ß√µes: TESTADO")
print("‚úì Retorno de refer√™ncias: TESTADO")

print("")
print("üéâ TESTES DE REFER√äNCIAS SIMPLES CONCLU√çDOS!")
print("üí° Verifica√ß√£o de suporte a ref em fun√ß√µes")

print("")
print("=== TESTES CONCLU√çDOS ===") 