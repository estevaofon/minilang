// ============================================
// MiniLang - Teste de Refer√™ncias em Fun√ß√µes
// Verifica√ß√£o de par√¢metros e retornos ref
// ============================================

print("=== TESTE DE REFER√äNCIAS EM FUN√á√ïES ===")
print("Verifica√ß√£o de par√¢metros e retornos ref")
print("")

// ============================================
// DEFINI√á√ÉO DA ESTRUTURA
// ============================================
print("--- DEFINI√á√ÉO DA ESTRUTURA ---")

// Definir n√≥ da √°rvore bin√°ria
struct TreeNode
    valor: int,
    esquerda: ref TreeNode,
    direita: ref TreeNode
end

print("‚úì Struct TreeNode definido com auto-refer√™ncia")
print("")

// ============================================
// TESTE 1: FUN√á√ÉO COM PAR√ÇMETRO REF
// ============================================
print("--- TESTE 1: FUN√á√ÉO COM PAR√ÇMETRO REF ---")

// Fun√ß√£o que recebe uma refer√™ncia como par√¢metro
func modificar_no(node: ref TreeNode)
    if node != null then
        node.valor = node.valor * 2
        print("Valor modificado para: " + to_str(node.valor))
    end
end

print("‚úì Fun√ß√£o com par√¢metro ref definida")

// ============================================
// TESTE 2: FUN√á√ÉO QUE RETORNA REF
// ============================================
print("--- TESTE 2: FUN√á√ÉO QUE RETORNA REF ---")

// Fun√ß√£o que retorna uma refer√™ncia
func obter_filho_esquerdo(node: ref TreeNode): ref TreeNode
    if node != null then
        return node.esquerda
    else
        return null
    end
end

print("‚úì Fun√ß√£o que retorna ref definida")

// ============================================
// TESTE 3: FUN√á√ÉO COM M√öLTIPLOS PAR√ÇMETROS REF
// ============================================
print("--- TESTE 3: FUN√á√ÉO COM M√öLTIPLOS PAR√ÇMETROS REF ---")

// Fun√ß√£o que troca os filhos de um n√≥
func trocar_filhos(node: ref TreeNode)
    if node != null then
        let temp: ref TreeNode = node.esquerda
        node.esquerda = node.direita
        node.direita = temp
        print("‚úì Filhos trocados com sucesso")
    end
end

print("‚úì Fun√ß√£o com m√∫ltiplos par√¢metros ref definida")

// ============================================
// TESTE 4: FUN√á√ÉO QUE CRIA E RETORNA REF
// ============================================
print("--- TESTE 4: FUN√á√ÉO QUE CRIA E RETORNA REF ---")

// Fun√ß√£o que cria um novo n√≥ e retorna refer√™ncia
func criar_no(valor: int): ref TreeNode
    let novo_no: TreeNode = TreeNode(valor, null, null)
    return ref novo_no
end

print("‚úì Fun√ß√£o que cria e retorna ref definida")

// ============================================
// TESTE 5: FUN√á√ÉO RECURSIVA COM REF
// ============================================
print("--- TESTE 5: FUN√á√ÉO RECURSIVA COM REF ---")

// Fun√ß√£o recursiva que percorre √°rvore
func percorrer_arvore(node: ref TreeNode)
    if node != null then
        print("Visitando n√≥ com valor: " + to_str(node.valor))
        percorrer_arvore(node.esquerda)
        percorrer_arvore(node.direita)
    end
end

print("‚úì Fun√ß√£o recursiva com ref definida")

// ============================================
// TESTE 6: FUN√á√ÉO QUE MODIFICA ESTRUTURA
// ============================================
print("--- TESTE 6: FUN√á√ÉO QUE MODIFICA ESTRUTURA ---")

// Fun√ß√£o que adiciona filho a um n√≥
func adicionar_filho_esquerdo(pai: ref TreeNode, filho: ref TreeNode)
    if pai != null then
        pai.esquerda = filho
        print("‚úì Filho esquerdo adicionado")
    end
end

print("‚úì Fun√ß√£o que modifica estrutura definida")

// ============================================
// EXECU√á√ÉO DOS TESTES
// ============================================
print("--- EXECU√á√ÉO DOS TESTES ---")

// Criar √°rvore de teste
let raiz: TreeNode = TreeNode(10, null, null)
let filho_esq: TreeNode = TreeNode(5, null, null)
let filho_dir: TreeNode = TreeNode(15, null, null)

print("‚úì √Årvore de teste criada")

// Teste 1: Modificar n√≥ usando fun√ß√£o com par√¢metro ref
print("")
print("Teste 1: Modificando n√≥...")
modificar_no(ref raiz)

// Teste 2: Obter filho usando fun√ß√£o que retorna ref
print("")
print("Teste 2: Obtendo filho esquerdo...")
let filho_obtido: ref TreeNode = obter_filho_esquerdo(ref raiz)
if filho_obtido != null then
    print("Filho esquerdo encontrado com valor: " + to_str(filho_obtido.valor))
else
    print("Filho esquerdo √© null")
end

// Teste 3: Trocar filhos
print("")
print("Teste 3: Trocando filhos...")
raiz.esquerda = ref filho_esq
raiz.direita = ref filho_dir
print("Antes da troca - Esquerda: " + to_str(raiz.esquerda.valor) + ", Direita: " + to_str(raiz.direita.valor))
trocar_filhos(ref raiz)
print("Ap√≥s a troca - Esquerda: " + to_str(raiz.esquerda.valor) + ", Direita: " + to_str(raiz.direita.valor))

// Teste 4: Criar novo n√≥ usando fun√ß√£o
print("")
print("Teste 4: Criando novo n√≥...")
let novo_no: ref TreeNode = criar_no(25)
print("Novo n√≥ criado com valor: " + to_str(novo_no.valor))

// Teste 5: Percorrer √°rvore
print("")
print("Teste 5: Percorrendo √°rvore...")
percorrer_arvore(ref raiz)

// Teste 6: Adicionar filho
print("")
print("Teste 6: Adicionando filho...")
adicionar_filho_esquerdo(ref raiz, ref novo_no)
print("Ap√≥s adicionar filho - Esquerda: " + to_str(raiz.esquerda.valor))

// ============================================
// TESTE 7: FUN√á√ÉO COMPLEXA COM REF
// ============================================
print("")
print("--- TESTE 7: FUN√á√ÉO COMPLEXA COM REF ---")

// Fun√ß√£o que encontra o n√≥ com maior valor
func encontrar_maior(node: ref TreeNode): ref TreeNode
    if node == null then
        return null
    end
    
    let maior_esq: ref TreeNode = encontrar_maior(node.esquerda)
    let maior_dir: ref TreeNode = encontrar_maior(node.direita)
    
    let maior_atual: ref TreeNode = ref node
    
    if maior_esq != null and maior_esq.valor > maior_atual.valor then
        maior_atual = maior_esq
    end
    
    if maior_dir != null and maior_dir.valor > maior_atual.valor then
        maior_atual = maior_dir
    end
    
    return maior_atual
end

print("‚úì Fun√ß√£o complexa com ref definida")

// Testar fun√ß√£o complexa
print("")
print("Teste 7: Encontrando maior valor...")
let maior: ref TreeNode = encontrar_maior(ref raiz)
if maior != null then
    print("Maior valor encontrado: " + to_str(maior.valor))
else
    print("Nenhum valor encontrado")
end

// ============================================
// RESUMO DOS TESTES
// ============================================
print("")
print("=== RESUMO DOS TESTES ===")
print("‚úì Par√¢metros ref em fun√ß√µes: FUNCIONANDO")
print("‚úì Retorno de refer√™ncias: FUNCIONANDO")
print("‚úì M√∫ltiplos par√¢metros ref: FUNCIONANDO")
print("‚úì Cria√ß√£o e retorno de ref: FUNCIONANDO")
print("‚úì Fun√ß√µes recursivas com ref: FUNCIONANDO")
print("‚úì Modifica√ß√£o de estrutura: FUNCIONANDO")
print("‚úì Fun√ß√µes complexas com ref: FUNCIONANDO")

print("")
print("üéâ TODOS OS TESTES DE REFER√äNCIAS EM FUN√á√ïES PASSARAM!")
print("üí° O compilador suporta completamente:")
print("   - Par√¢metros do tipo ref")
print("   - Retorno de refer√™ncias")
print("   - Auto-referenciamento em fun√ß√µes")
print("   - Modifica√ß√£o de estruturas via ref")

print("")
print("=== TESTES CONCLU√çDOS COM SUCESSO ===") 