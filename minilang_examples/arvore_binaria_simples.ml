// ============================================
// MiniLang - Percurso de √Årvore Bin√°ria Simples
// Demonstra√ß√£o das Atribui√ß√µes de Structs
// ============================================

print("=== PERCURSO DE √ÅRVORE BIN√ÅRIA SIMPLES ===")
print("Demonstra√ß√£o das Atribui√ß√µes de Structs")
print("")

// ============================================
// DEFINI√á√ÉO DA ESTRUTURA
// ============================================
print("--- DEFINI√á√ÉO DA ESTRUTURA ---")

// Definir n√≥ da √°rvore bin√°ria
struct TreeNode
    valor: int,
    esquerda: ref TreeNode,
    direita: ref TreeNode
end

print("‚úì Struct TreeNode definido com auto-refer√™ncia")
print("")

// ============================================
// FUN√á√ïES DE PERCURSO
// ============================================
print("--- FUN√á√ïES DE PERCURSO ---")

// Fun√ß√£o para percurso in-order (esquerda, raiz, direita)
func percurso_in_order(node: ref TreeNode)
    if node != null then
        percurso_in_order(node.esquerda)
        print("Valor: " + to_str(node.valor))
        percurso_in_order(node.direita)
    end
end

// Fun√ß√£o para percurso pre-order (raiz, esquerda, direita)
func percurso_pre_order(node: ref TreeNode)
    if node != null then
        print("Valor: " + to_str(node.valor))
        percurso_pre_order(node.esquerda)
        percurso_pre_order(node.direita)
    end
end

// Fun√ß√£o para percurso post-order (esquerda, direita, raiz)
func percurso_post_order(node: ref TreeNode)
    if node != null then
        percurso_post_order(node.esquerda)
        percurso_post_order(node.direita)
        print("Valor: " + to_str(node.valor))
    end
end

// Fun√ß√£o para contar n√≥s na √°rvore
func contar_nos(node: ref TreeNode): int
    if node == null then
        return 0
    end
    
    return 1 + contar_nos(node.esquerda) + contar_nos(node.direita)
end

// Fun√ß√£o para encontrar altura da √°rvore
func altura_arvore(node: ref TreeNode): int
    if node == null then
        return 0
    end
    
    let altura_esq: int = altura_arvore(node.esquerda)
    let altura_dir: int = altura_arvore(node.direita)
    
    if altura_esq > altura_dir then
        return altura_esq + 1
    else
        return altura_dir + 1
    end
end

print("‚úì Fun√ß√µes de percurso implementadas")
print("‚úì Fun√ß√µes auxiliares implementadas")
print("")

// ============================================
// CONSTRU√á√ÉO MANUAL DA √ÅRVORE
// ============================================
print("--- CONSTRU√á√ÉO MANUAL DA √ÅRVORE ---")

// Criar √°rvore manualmente usando atribui√ß√µes
let raiz: TreeNode = TreeNode(50, null, null)
print("‚úì Raiz criada com valor 50")

// Criar n√≥s filhos
let filho_esq: TreeNode = TreeNode(30, null, null)
let filho_dir: TreeNode = TreeNode(70, null, null)

// Criar netos esquerdos
let neto_esq_esq: TreeNode = TreeNode(20, null, null)
let neto_esq_dir: TreeNode = TreeNode(40, null, null)

// Criar netos direitos
let neto_dir_esq: TreeNode = TreeNode(60, null, null)
let neto_dir_dir: TreeNode = TreeNode(80, null, null)

// Criar bisnetos
let bisneto_esq: TreeNode = TreeNode(10, null, null)
let bisneto_dir: TreeNode = TreeNode(25, null, null)

print("‚úì N√≥s criados")
print("")

// ============================================
// MONTAGEM DA √ÅRVORE COM ATRIBUI√á√ïES
// ============================================
print("--- MONTAGEM DA √ÅRVORE COM ATRIBUI√á√ïES ---")

// Montar a √°rvore usando atribui√ß√µes din√¢micas
raiz.esquerda = ref filho_esq
raiz.direita = ref filho_dir

filho_esq.esquerda = ref neto_esq_esq
filho_esq.direita = ref neto_esq_dir

filho_dir.esquerda = ref neto_dir_esq
filho_dir.direita = ref neto_dir_dir

neto_esq_esq.esquerda = ref bisneto_esq
neto_esq_esq.direita = ref bisneto_dir

print("‚úì √Årvore montada com atribui√ß√µes din√¢micas")
print("")

// ============================================
// INFORMA√á√ïES DA √ÅRVORE
// ============================================
print("--- INFORMA√á√ïES DA √ÅRVORE ---")

let total_nos: int = contar_nos(ref raiz)
let altura: int = altura_arvore(ref raiz)

print("Total de n√≥s na √°rvore: " + to_str(total_nos))
print("Altura da √°rvore: " + to_str(altura))
print("")

// ============================================
// PERCURSOS DA √ÅRVORE
// ============================================
print("--- PERCURSOS DA √ÅRVORE ---")

print("1. PERCURSO IN-ORDER (esquerda, raiz, direita):")
print("   Resultado esperado: 10, 20, 25, 30, 40, 50, 60, 70, 80")
print("   Resultado obtido:")
percurso_in_order(ref raiz)
print("")

print("2. PERCURSO PRE-ORDER (raiz, esquerda, direita):")
print("   Resultado esperado: 50, 30, 20, 10, 25, 40, 70, 60, 80")
print("   Resultado obtido:")
percurso_pre_order(ref raiz)
print("")

print("3. PERCURSO POST-ORDER (esquerda, direita, raiz):")
print("   Resultado esperado: 10, 25, 20, 40, 30, 60, 80, 70, 50")
print("   Resultado obtido:")
percurso_post_order(ref raiz)
print("")

// ============================================
// MODIFICA√á√ÉO DIN√ÇMICA DA √ÅRVORE
// ============================================
print("--- MODIFICA√á√ÉO DIN√ÇMICA DA √ÅRVORE ---")

print("Modificando valores diretamente...")

// Modificar valores de alguns n√≥s diretamente
raiz.valor = 100
print("‚úì Valor da raiz alterado para 100")

filho_esq.valor = 200
print("‚úì Valor do filho esquerdo alterado para 200")

filho_dir.valor = 300
print("‚úì Valor do filho direito alterado para 300")

print("")

// Mostrar percurso ap√≥s modifica√ß√µes
print("Percurso IN-ORDER ap√≥s modifica√ß√µes diretas:")
percurso_in_order(ref raiz)
print("")

// ============================================
// ADI√á√ÉO DIN√ÇMICA DE NOVOS N√ìS
// ============================================
print("--- ADI√á√ÉO DIN√ÇMICA DE NOVOS N√ìS ---")

print("Adicionando novos n√≥s dinamicamente...")

// Criar novos n√≥s
let novo_no1: TreeNode = TreeNode(15, null, null)
let novo_no2: TreeNode = TreeNode(35, null, null)
let novo_no3: TreeNode = TreeNode(55, null, null)

// Adicionar √† √°rvore usando atribui√ß√µes
bisneto_esq.esquerda = ref novo_no1
neto_esq_dir.esquerda = ref novo_no2
neto_dir_esq.esquerda = ref novo_no3

print("‚úì Novos n√≥s adicionados dinamicamente")
print("")

// Mostrar nova contagem
let novo_total: int = contar_nos(ref raiz)
let nova_altura: int = altura_arvore(ref raiz)

print("Nova contagem de n√≥s: " + to_str(novo_total))
print("Nova altura da √°rvore: " + to_str(nova_altura))
print("")

// Mostrar novo percurso in-order
print("Novo percurso IN-ORDER ap√≥s adi√ß√µes:")
percurso_in_order(ref raiz)
print("")

// ============================================
// RECONSTRU√á√ÉO DE UMA NOVA √ÅRVORE
// ============================================
print("--- RECONSTRU√á√ÉO DE UMA NOVA √ÅRVORE ---")

print("Criando uma nova √°rvore simples...")

// Criar nova √°rvore
let nova_raiz: TreeNode = TreeNode(25, null, null)
let novo_filho_esq: TreeNode = TreeNode(15, null, null)
let novo_filho_dir: TreeNode = TreeNode(35, null, null)

// Montar nova √°rvore
nova_raiz.esquerda = ref novo_filho_esq
nova_raiz.direita = ref novo_filho_dir

print("‚úì Nova √°rvore criada")
print("")

// Mostrar percurso da nova √°rvore
print("Percurso IN-ORDER da nova √°rvore:")
percurso_in_order(ref nova_raiz)
print("")

// ============================================
// RESUMO DA IMPLEMENTA√á√ÉO
// ============================================
print("=== RESUMO DA IMPLEMENTA√á√ÉO ===")
print("‚úì Estrutura TreeNode com auto-refer√™ncia funcionando")
print("‚úì Atribui√ß√µes din√¢micas de campos implementadas")
print("‚úì Fun√ß√µes de percurso (in-order, pre-order, post-order) funcionando")
print("‚úì Constru√ß√£o manual de √°rvore com atribui√ß√µes funcionando")
print("‚úì Modifica√ß√£o direta de valores funcionando")
print("‚úì Adi√ß√£o din√¢mica de n√≥s implementada")
print("‚úì C√°lculo de altura e contagem de n√≥s implementado")
print("‚úì Reconstru√ß√£o de √°rvore funcionando")

print("")
print("üéâ Algoritmo de percurso de √°rvore bin√°ria implementado com sucesso!")
print("üí° Demonstra√ß√£o completa das atribui√ß√µes de structs")
print("üí° Auto-refer√™ncia funcionando perfeitamente")
print("üí° Estruturas de dados din√¢micas suportadas")

print("")
print("=== IMPLEMENTA√á√ÉO CONCLU√çDA COM SUCESSO ===") 